---
version: "3.8"
services:
  zoo1:
    image: wurstmeister/zookeeper:latest
    hostname: zoo1
    ports:
      - "2181:2181"
    environment:
      ZOO_MY_ID: 1
      ZOO_PORT: 2181
      ZOO_SERVERS: server.1=zoo1:2888:3888
    # Use if you wish to keep data between restarts
    # volumes:
    #   - ./zk-single-kafka-single/zoo1/data:/data
    #   - ./zk-single-kafka-single/zoo1/datalog:/datalog
  kafka1:
    image: wurstmeister/kafka:latest
    hostname: kafka1
    ports:
      - "9092:9092"
    environment:
      KAFKA_LISTENERS: INTERNAL://:19092,EXTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_AUTHORIZER_CLASS_NAME: "kafka.security.auth.SimpleAclAuthorizer"
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    # Use if you wish to keep data between restarts
    # volumes:
    #   - ./zk-single-kafka-single/kafka1/data:/var/lib/kafka/data
    depends_on:
      - zoo1
  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    hostname: schema-registry
    container_name: schema-registry
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "kafka1:19092"
    depends_on:
      - zoo1
      - kafka1
  connect:
    image: confluentinc/cp-kafka-connect:latest
    hostname: connect
    container_name: connect
    ports:
      - "8083:8083"
    environment:
      CONNECT_PRODUCER_COMPRESSION_TYPE: lz4
      CONNECT_BOOTSTRAP_SERVERS: "kafka1:19092"
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_REST_LISTENERS: http://0.0.0.0:8083
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: docker-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      # CLASSPATH required due to CC-2422. May need to change the version number depending on the image. Use if using confluent control center
      # CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-6.1.0.jar
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
    depends_on:
      - kafka1
      - schema-registry
      - zoo1

  # Within tucows we do not use confluent control center. instead we use akhq as an alternative.
  akhq:
    image: tchiotludo/akhq:latest
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server-1:
              properties:
                bootstrap.servers: "kafka1:19092"
              schema-registry:
                url: "http://schema-registry:8081"
              connect:
                - name: connect-1
                  url: "http://connect:8083"
    ports:
      - 8080:8080
    links:
      - kafka1
      - schema-registry
      - connect

  # control-center:
  #   image: confluentinc/cp-enterprise-control-center:latest
  #   hostname: control-center
  #   container_name: control-center
  #   depends_on:
  #     - broker
  #     - schema-registry
  #     - connect
  #     - ksqldb-server
  #   ports:
  #     - "9021:9021"
  #   environment:
  #     CONTROL_CENTER_BOOTSTRAP_SERVERS: "kafka1:19092"
  #     CONTROL_CENTER_CONNECT_CLUSTER: "connect:8083"
  #     CONTROL_CENTER_KSQL_KSQLDB1_URL: "http://ksqldb-server:8088"
  #     CONTROL_CENTER_KSQL_KSQLDB1_ADVERTISED_URL: "http://localhost:8088"
  #     CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
  #     CONTROL_CENTER_REPLICATION_FACTOR: 1
  #     CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
  #     CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
  #     CONFLUENT_METRICS_TOPIC_REPLICATION: 1
  #     PORT: 9021

  # used to generate some test data
  kafkacat:
    image: confluentinc/cp-kafkacat:latest
    depends_on:
      - kafka1
      - zoo1
    command:
      - bash
      - -c
      - |
        kafkacat -P -b kafka1:19092 -t json << EOF
        {"_id":"5c4b2b45ab234c86955f0802","index":0,"guid":"d3637b06-9940-4958-9f82-639001c14c34"}
        {"_id":"5c4b2b459ffa9bb0c0c249e1","index":1,"guid":"08612fb5-40a7-45e5-9ff2-beb89a1b2835"}
        {"_id":"5c4b2b4545d7cbc7bf8b6e3e","index":2,"guid":"4880280a-cf8b-4884-881e-7b64ebf2afd0"}
        {"_id":"5c4b2b45dab381e6b3024c6d","index":3,"guid":"36d04c26-0dae-4a8e-a66e-bde9b3b6a745"}
        {"_id":"5c4b2b45d1103ce30dfe1947","index":4,"guid":"14d53f2c-def3-406f-9dfb-c29963fdc37e"}
        {"_id":"5c4b2b45d6d3b5c51d3dacb7","index":5,"guid":"a20cfc3a-934a-4b93-9a03-008ec651b5a4"}
        EOF
        kafkacat -P -b kafka1:19092 -t csv << EOF
        1,Sauncho,Attfield,sattfield0@netlog.com,Male,221.119.13.246
        2,Luci,Harp,lharp1@wufoo.com,Female,161.14.184.150
        3,Hanna,McQuillan,hmcquillan2@mozilla.com,Female,214.67.74.80
        4,Melba,Lecky,mlecky3@uiuc.edu,Female,158.112.18.189
        5,Mordecai,Hurdiss,mhurdiss4@rambler.ru,Male,175.123.45.143
        EOF

        kafkacat -b kafka1:19092 -o beginning -G json-consumer json

  avroproducer-python:
    container_name: "avroproducer-python"
    image: "avroproducer-python:latest"
    build:
      context: ./python/
      dockerfile: Dockerfile.avroproducer
    environment:
      BROKERS: "kafka1:19092"
      SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      TOPIC: "_kafkaclient-pythonexample_avro"
    depends_on:
      - kafka1
      - zoo1
      - schema-registry

  avroconsumer-python:
    container_name: "avroconsumer-python"
    image: "avroconsumer-python:latest"
    build:
      context: ./python/
      dockerfile: Dockerfile.avroconsumer
    environment:
      BROKERS: "kafka1:19092"
      SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      TOPIC: "_kafkaclient-pythonexample_avro"
      GROUP_ID: "pythonexample_avro_group"
    depends_on:
      - kafka1
      - zoo1
      - schema-registry

  protobufproducer-python:
    container_name: "protobufproducer-python"
    image: "protobufproducer-python:latest"
    build:
      context: ./python/
      dockerfile: Dockerfile.protobufproducer
    environment:
      BROKERS: "kafka1:19092"
      SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      TOPIC: "_kafkaclient-pythonexample_protobuf"
    depends_on:
      - kafka1
      - zoo1
      - schema-registry

  protobufconsumer-python:
    container_name: "protobufconsumer-python"
    image: "protobufconsumer-python:latest"
    build:
      context: ./python/
      dockerfile: Dockerfile.protobufconsumer
    environment:
      BROKERS: "kafka1:19092"
      SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      TOPIC: "_kafkaclient-pythonexample_protobuf"
      GROUP_ID: "pythonexample_protobuf_group"
    depends_on:
      - kafka1
      - zoo1
      - schema-registry

  jsonproducer-python:
    container_name: "jsonproducer-python"
    image: "jsonproducer-python:latest"
    build:
      context: ./python/
      dockerfile: Dockerfile.jsonproducer
    environment:
      BROKERS: "kafka1:19092"
      SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      TOPIC: "_kafkaclient-pythonexample_json"
    depends_on:
      - kafka1
      - zoo1
      - schema-registry

  jsonconsumer-python:
    container_name: "jsonconsumer-python"
    image: "jsonconsumer-python:latest"
    build:
      context: ./python/
      dockerfile: Dockerfile.jsonconsumer
    environment:
      BROKERS: "kafka1:19092"
      SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      TOPIC: "_kafkaclient-pythonexample_json"
      GROUP_ID: "pythonexample_json_group"
    depends_on:
      - kafka1
      - zoo1
      - schema-registry
